Current Wishlist:

1. GMRFs: 
	
	We want to implement the simulation and conditioning of GMRF's on a 
	(nested) mesh.
	
	TODO:
	
	a. migrate the kl_expansion to the gmrf class. 
	b. when initializing the field, specify the parametrization (kl, precision,
	   covariance, others?)
	c. implement pointwise conditioning (sample paths and field)
	d. implement conditioning on hard constraints (sample paths and field)
	e. implement conditioning on soft constraints (sample paths and field)
	f. multiscale by local averaging (fix), or via Willsky?


2. Function Class:

	We want to define nodal-, mesh-, and explicit functions separately. 
	This will make it easier to assemble, and to deal with different meshes, 
	and -elements.

	TODO: 

	a. initialize function
	b. evaluate function and its derivatives
		i. move shape_eval from 'System' to 'Elements' class 
		ii. change notation for derivatives from (degree, ix, iy) to 
			tuples of length dim and derivative (ix, iy, iz), e.g.
			default is (0,0) function evaluation.  
	
	
3. 1D Mesh: 

	Extend the quadmesh to include one dimensional meshes. 
	
	TODO:
	
	a. define the BiCell class (lots of functions!)
	b. change Mesh class to be dimensionally aware
	c. add 1D shape functions. 
	d. modify plot function
	

4. Generalized 2D Mesh: 

	Extend the QuadCell object to include trees of cells whose root cells
	arrangement is given by a more general connectivity matrix.
	
	TODO: 
	
	a. write a function that imports a mesh from a gmsh file (generalize 
	   'grid_size').  
	b. resolve how to orient cells consistently (e.g. goin 'N' twice and then
	   'S' twice should get you back to the same cell. Perhaps loop over all 
	   elements and resolve all neighbors (and reciprocally)0.  
	c. Resolve this stupid problem with level 0 (the empty root). Maybe make
	   the initial refinement by default. 